[
  {
    "path": "posts/2021-09-01-test-ipynb/",
    "title": "Test Ipynb",
    "description": "Test Ipynb format file",
    "author": [
      {
        "name": "Fajar Nugroho",
        "url": "https://fajardwnugroho.com/"
      }
    ],
    "date": "2021-09-01",
    "categories": [
      "Python",
      "Data Analysis",
      "Data Science",
      "Tutorial"
    ],
    "contents": "\n\nContents\n\n\nPython\nPython merupakan sebuah open source, high level programming language dan juga menyediakan service yang bagus untuk object-oriented programming. Python merupakan salah satu bahasa pemrograman terbaik yang digunakan di bidang data science oleh para data scientist, analyst dan lain lain. Python menyediakan functionality yang bagus saat berhubungan dengan matematika statistik dan fungsi scientific.\nPython merupakan bahasa pemrograman yang berurutan dan sistematis, sehingga dibaca dari atas ke bawah\nSoftware yang digunakan untuk pemrograman Python ini dinamakan Jupyter Notebook. Alasan Jupyter Notebook digunakan pada pemrograman ini karena layanan cloud yang ditawarkan sehingga praktis untuk menggunakannya\nTempat code ditulis ini dinamakan cell, dimana baik code ataupun keterangan ditulis. Untuk menjalankan code cell yang diinginkan digunakan command SHIFT + ENTER lalu cell akan otomatis ditambahkan\n‘#’ merupakan simbol yang digunakan untuk comment, dimana nantinya jupyter notebook tidak akan membacanya sebagai sebuah code\nfrom IPython.display import Image\nImage(\"asset/Mind Map.png\")\n\nVariabels\nVariabel merupakan sebuah kontainer atau tempat penyimpanan untuk menyimpan nilai sebuah data. Variabel dibuat disaat sebuah data disimpan ke dalam tempat tersebut. Untuk mengassign nilai terhadap sebuah variabel, digunakan simbol =\nTerdapat beberapa ketentuan dalam penamaan variabel di dalam python\n1. Sebuah variabel harus dimulai dari huruf atau underscore(_)\nx = 7\n_x = 6\n7\nselain itu, maka akan terjadi error\n-x = 8\n*r = 0\n  File \"<ipython-input-5-d6f2de8f0927>\", line 1\n    -x = 8\n    ^\nSyntaxError: cannot assign to operator\n2. Sebuah variabel tidak bisa dimulai dengan angka\n4y = 10\n15i = 25\n  File \"<ipython-input-6-5b308d401a72>\", line 1\n    4y = 10\n     ^\nSyntaxError: invalid syntax\nCase Sensitive\nCase Sensitive memiliki pengertian dimana huruf besar dan huruf kecil memiliki perbedaan.\nb = 20\nB = 30\nb\nB\n10\nMultiple Variabel\nMerupakan fitur dimana bisa menetapkan nilai ke beberapa variabel dalam satu baris code\na,b,c = 3,9,10\na\n3\nc\n10\nOutput Variabel\nOutput variabel merupakan nilai yang akan ditampilkan pada bagian code, untuk menampilkannya bisa menggunakan command print()\na = 10\nb = 20\nprint(a,b) #merupakan fungsi untuk mengeluarkan output dari a dan b\n10 20\nnama = \"Fajar\"\nnama\n'Fajar'\nprint(nama)\nFajar\nData Type in Python\nTipe data sama dengan jenis data, yang merupakan hal penting di dalam Python. Terdapat beberapa jenis Tipe data yang sering digunakan dalam Python mulai dari Numeric dan text type\nUntuk memeriksa tipe data dari variabel, digunakan command type()\nNumeric Type\nMerupakan tipe data yang menampung jenis data berupa angka baik angka decimal maupun bilangan bulat. Numeric type terdiri dari 3 tipe yaitu,\nInteger/Int\nInteger digunakan untuk menampung jenis data bertipe numeric atau angka dalam bentuk bilangan bulat\na = 1000\ntype(a)\nint\nFloat\nFloat digunakan untuk menampung jenis data bertipe decimal\nb = 20.6\ntype(b)\nfloat\nComplex\nComplex digunakan untuk menampung jenis data yang memiliki variasi, namun tipe ini jarang digunakan\nc = 3+14j\nprint(type(c))\n\ncompleks = 3.14647148148145481\nprint(type(compleks))\n<class 'complex'>\n<class 'float'>\nBoolean\nBoolean merepresentasikan dua nilai, yaitu True dan False\nis_animal = True, False, True, True\nis_animal\n(True, False, True, True)\nprint(type(is_animal))\n<class 'tuple'>\n3 > 4\nFalse\n3 == 5\nFalse\nBoolean juga diibaratkan sebagai angka dalam operasi matematika, yaitu True bernilai 1 dan False bernilai 0\n 1 + True\n2\n1 + False\n1\nText Type\nMerupakan tipe data yang menampung huruf/kata dan ditandai dengan penggunaan tanda kutip. Apabila nilai yang di tampung angka, namun ditambahkan tanda kutip, maka python tetap akan membacanya sebagai string\ntext = \"Hello Python\"\ntype(text)\nstr\ntext2 = \"2\"\ntype(text2)\nstr\nUntuk menggabungkan dua teks, bisa digunakan tanda +\ntemp = \"Hello Bob \"\ntemp2 = \"How are you?\"\ntemp + temp2\n'Hello Bob How are you?'\nTerdapat beberapa method yang bisa digunakan untuk membantu dalam penerapan string\nLower\nDigunakan untuk mengubah huruf menjadi huruf kecil\nstring = \"HELLO MY NAME IS LOWER\"\nlower = string.lower()\nprint(lower)\nhello my name is lower\nx = \"HELLO WORLD\"\nx1 = x.lower()\nx1\n'hello world'\n# variable.function() <- syntax basic\nUpper\nDigunakan untuk mengubah huruf menjadi huruf besar\nstring = \"hello my name is upper\"\nupper = string.upper()\nprint(upper)\nHELLO MY NAME IS UPPER\nReplace\nDigunakan untuk mengganti kata menjadi sebuah kata lain\ntext = \"Hello my name is John\"\nreplace = text.replace(\"John\",\"Tiery\") # -> \"apa yg ingin di ganti\",\"di ganti dengan apa\"\nprint(replace)\nHello my name is Tiery\nSplit\nDigunakan untuk memisah sebuah value sesuai dengan parameter yang diberikan\nfruit = \"Apple Banana Orange Melon\"\nsplit = fruit.split(\" \")\nprint(split)\n['Apple', 'Banana', 'Orange', 'Melon']\nFormat\nDigunakan untuk memasukkan value dalam placeholder yang dibuat, placeholdernya ditandai dengan tanda {}\nstring = \"My name is {name} and i am {age} years old, i do {doing}\"\nprint(string.format(name=\"Python\",age=20,doing=\"coding\"))\nMy name is Python and i am 20 years old, i do coding\nLen\nDigunakan untuk menghitung panjang (Lenght) dari sebuah kata/kalimat\nstring = \"My name is Python\"\nprint(len(string))\n17\nUntuk memeriksa variabel apa saja yang telah dibuat, digunakan command %whos\n%whos\nVariable   Type       Data/Info\n-------------------------------\na          int        1000\nb          float      20.6\nc          complex    (3+14j)\ncompleks   float      3.1464714814814547\nfruit      str        Apple Banana Orange Melon\nnama       str        Fajar\nreplace    str        Hello my name is Tiery\nsplit      list       n=4\nstring     str        My name is Python\ntemp       str        Hello Bob \ntemp2      str        How are you?\ntext       str        Hello my name is John\ntext2      str        2\nx1         str        hello world\nUntuk menghapus variabel yang telah dibuat, menggunakan command del\ndel x1\n%whos\nVariable   Type       Data/Info\n-------------------------------\na          int        1000\nb          float      20.6\nc          complex    (3+14j)\ncompleks   float      3.1464714814814547\nfruit      str        Apple Banana Orange Melon\nnama       str        Fajar\nreplace    str        Hello my name is Tiery\nsplit      list       n=4\nstring     str        My name is Python\ntemp       str        Hello Bob \ntemp2      str        How are you?\ntext       str        Hello my name is John\ntext2      str        2\nConvert Data Type\nPython memungkinkan bahwa setiap tipe data, diganti menjadi tipe data yang lain, yaitu dengan menggunakan command tipe data yang diinginkan\n# function(variable)\nInteger to Float\na = 10\na = float(a)\nprint(a)\nprint(type(a))\n10.0\n<class 'float'>\nb = 20\nprint(float(b))\n20.0\nFloat to Integer\nc = 31.9\nc = int(c)\nc\nprint(type(c))\n<class 'int'>\nd = 50.0\nprint(int(d))\n50\nInteger to String\ne = 20\ne = str(e)\nprint(type(e))\nprint(e)\n<class 'str'>\n20\nf = 40\nprint(str(f))\n40\nFloat to String\ng = 40.5\ng = str(g)\nprint(type(g))\nprint(g)\n<class 'str'>\n40.5\nh = 50.6\nprint(str(h))\n50.6\nString to Integer\ni = \"40\"\ni = int(i)\ntype(i)\nint\nString to float\nj = \"50.5\"\nj = float(j)\ntype(j)\nfloat\nList, Tuple, Set, Dictionary\nList\nList merupakan sebuah data type bertipe built in pada Python yang digunakan untuk menyimpan banyak nilai pada satu variabel. List bisa menampung tipe data yang berbeda, seperti string, int, float dan lain lain.\nUntuk mengakses nilai pada list, digunakan index, pada python index dimulai dari angka 0.\nList ditandai dengan simbol [ ].\nList = [\"Red\", \"Blue\", \"Green\"]\nprint(List)\n['Red', 'Blue', 'Green']\nPada code dibawah, menunjukkan cara mengakses list\nList = [\"Red\", \"Blue\", \"Green\",\"Black\"]\nprint(List[2])\nGreen\nList = [\"Red\", \"Blue\", \"Green\",\"Black\"]\nprint(List[1:4])\n['Blue', 'Green', 'Black']\nPada code dibawah, isi dari list bisa diubah\nList = [\"Red\", \"Blue\", \"Green\",\"Black\"]\nList\nList[1] = \"Orange\"\n\nprint(List)\n['Red', 'Orange', 'Green', 'Black']\n%whos\nVariable    Type     Data/Info\n------------------------------\nFruit       list     n=4\nList        list     n=4\na           float    10.0\nb           int      20\nc           int      30\ncompleks    float    3.1464714814814547\nd           float    50.0\ne           str      20\nf           int      40\nfruit       str      Apple, Banana, Orange, Melon\ng           str      40.5\nh           float    50.6\nis_animal   tuple    n=4\nlower       str      hello my name is lower\nreplace     str      Hello my name is Tiery\nsplit       list     n=4\nstring      str      Hello my name is John\ntext        str      Hello my name is John\nupper       str      HELLO MY NAME IS UPPER\nPada code dibawah, isi dari list bisa duplikat/berulang\nList = [\"Red\", \"Blue\", \"Green\",\"Black\"]\nList[0] = \"Black\"\nprint(List)\n['Black', 'Blue', 'Green', 'Black']\nUntuk menambah isi dari list, bisa menggunakan method append atau insert. Perbedaannya terletak pada posisi menambahkan isi tersebut, append menambahkan di bagian akhir list, sedangkan insert bisa dimana saja\nList = [\"Red\",\"Blue\",\"Green\",\"Black\"]\nList.append(\"white\")\nprint(List)\n['Red', 'Blue', 'Green', 'Black', 'white']\nList = [\"Red\",\"Blue\",\"Green\"]\nList.insert(2,\"Black\")\nprint(List)\n['Red', 'Blue', 'Black', 'Green']\nUntuk menghapus isi dari list, bisa menggunakan method pop atau remove. Perbedaannya terletak pada parameter, pop berupa index dan remove berupa value dari list\nList = [\"Red\",\"Blue\",\"Green\",\"Black\"]\nList.pop(2)\nprint(List)\n['Red', 'Blue', 'Black']\nList = [\"Red\",\"Blue\",\"Green\"]\nList.remove(\"Green\")\nprint(List)\n['Red', 'Blue']\nTuple\nTuple memiliki pengertian dan ciri yang mirip dengan list, perbedaannya hanya saat tuple dibuat, isi dari tuple tidak bisa diubah sama sekali\nTuple ditandai dengan simbol ( )\nTuple = (\"Red\", \"Blue\", \"Green\")\nprint(Tuple)\n('Red', 'Blue', 'Green')\nPada code dibawah, menunjukkan cara mengakses Tuple\nbuah = (\"Apple\",\"Orange\",\"Banana\")\nprint(buah[1])\nOrange\nPada code dibawah, isi dari tuple tidak bisa diubah\nbuah[0] = \"Pinapple\"\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-75-f5da10452b06> in <module>\n----> 1 buah[0] = \"Pinapple\"\n\n\nTypeError: 'tuple' object does not support item assignment\nPada code dibawah, isi dari tuple bisa duplikat/berulang\nexample_tuple = (\"Apple\",\"Apple\",\"Banana\")   #list [ ] , Tuple ( ), Set { }\nprint(example_tuple)\n('Apple', 'Apple', 'Banana')\nSet\nSet memiliki pengertian yang mirip dengan list dan tuple, namun memiliki sifat yang berkebalikan dengan keduanya. Isi dari set tidak memiliki index dan juga tidak boleh adanya nilai yang sama\nSet ditandai dengan simbol kurung kurawal { }\nSet = {\"Red\", \"Black\", \"Blue\"}\nprint(Set)\n{'Red', 'Blue', 'Black'}\nPada code dibawah, set tidak memiliki index\nexample_set = {20,30,40,50}\nprint(example_set[0])\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-1-0785267335f5> in <module>\n      1 example_set = {20,30,40,50}\n----> 2 print(example_set[0])\n\n\nTypeError: 'set' object is not subscriptable\nPada code dibawah menandakan bahwa isi dari seti tidak bisa duplikat\nexample_set = {20,30,40,50,20,20}\nprint(example_set)\n{40, 50, 20, 30}\nUntuk menambahkan value pada set, digunakan method add\nexample_set = {20,30,40,50}\nexample_set.add(60)\nprint(example_set)\n{40, 50, 20, 60, 30}\nUntuk menghapus value pada set,digunakan method discard\nexample_set = {20,30,40,50}\nexample_set.discard(30)\nprint(example_set)\n{40, 50, 20}\nDictionary\nMerupakan sebuah koleksi data yang tersusun, bisa diubah serta tidak diperbolehkan adanya nilai yang sama. Dict sering digunakan untuk menyimpan nilai dengan format key:nilai serta dapat menyimpan tipe data apapun, baik int, string, bahkan set, list dan juga tuple.\nPada code dibawah, merupakan contoh dari dictionary\nDictionary = {\n    \"name\" : \"Budi\",\n    \"age\"  : 20,\n    \"hobby\": \"play game\"\n}\nprint(Dictionary)\n{'name': 'Budi', 'age': 20, 'hobby': 'play game'}\nsiswa = {\n    \"nama\" : \"Fajar\",\n    \"usia\" : 18,\n    \"hobby\": \"Dota\"\n}\nprint(siswa)\n{'nama': 'Fajar', 'usia': 18, 'hobby': 'Dota'}\n# Dictionary -> key : value\nPada code dibawah, merupakan contoh untuk mengakses key dictionary\nprint(siswa[\"usia\"])\n18\nPada code dibawah, isi dari dictionary bisa ditambah\nDictionary[\"email\"] = \"budi@gmail.com\"\nprint(Dictionary)\n{'name': 'Budi', 'age': 20, 'hobby': 'play game', 'email': 'budi@gmail.com'}\nsiswa[\"gmail\"] = \"fajardwnugroho@gmail.com\"\nprint(siswa)\n{'nama': 'Fajar', 'usia': 18, 'hobby': 'Dota', 'gmail': 'fajardwnugroho'}\nUntuk memeriksa apakah sebuah key terdapat dalam dictionary, bisa menggunakan method in\n\"rumah\" in siswa\nFalse\n\"gmail\" in siswa\nTrue\nPada code dibawah, menggunakan method keys untuk mencari keys\nprint(siswa.keys())\ndict_keys(['nama', 'usia', 'hobby', 'gmail'])\nPada code dibawah, menggunakan method value untuk mencari nilai dari dictionary\nprint(siswa.values())\ndict_values(['Fajar', 18, 'Dota', 'fajardwnugroho'])\nPada code dibawah, menggunakan method items untuk mendapatkan pasangan dari keys dan juga nilainya\nprint(siswa.items())\nprint(siswa)\ndict_items([('nama', 'Fajar'), ('usia', 18), ('hobby', 'Dota'), ('gmail', 'fajardwnugroho')])\n{'nama': 'Fajar', 'usia': 18, 'hobby': 'Dota', 'gmail': 'fajardwnugroho'}\nOperator\nMerupakan sebuah simbol yang digunakan untuk perhitungan dan assign sebuah nilai. Terdapat beberapa macam operator\nOperator Aritmatika\nMerupakan Operator yang digunakan untuk perhitungan, dan terdiri dari beberapa jenis seperti: 1. + -> Digunakan untuk penjumlahan 2. - -> Digunakan untuk pengurangan 3. * -> Digunakan untuk perkalian 4. / -> Digunakan untuk pembagian 5. % -> Digunakan untuk modulus/sisa pembagian\na = 10\nb = 20\nprint(a+b)\n30\nc = 40\nd = 50\nprint(c-d)\n-10\na = 20\nb = 30\nprint(a*b)\n600\nc = 50\nd = 5\nprint(int(c/d))\n10\na = 14\nb = 3\nprint(a%b)\n2\nDalam operator matematika, terdapat shortcut untuk memudahkan perhitungan, yaitu dengan menambahkan tanda = di akhir opetarator matematika yang dipilih. 1. a+=b -> Memiliki arti a = a+b 2. a-=b -> Memiliki arti a = a-b 3. a=b -> Memiliki arti a = ab 4. a/=b -> Memiliki arti a = a/b 5. a%=b -> Memiliki arti a = a%b\na = 10\nb = 20\na+=b\nprint(a)\n30\nc = 20\nd = 50\nc-=d\nprint(c)\n-30\ne = 50\nf = 20\ne*=f\nprint(e)\n1000\nz = 100\nf = 10\nz/=f\nprint(z)\n10.0\np = 10\nh = 3\np%=h\nprint(p)\n1\nBonus\nOperator + juga bisa digunakan untuk menggabungkan value saat melakukan print, untuk menjadi satu kalimat yang utuh\ntemp = \"apple\"\nprint(\"I want to eat \"+temp)\nI want to eat apple\nNamun, apabila kedua value memiliki tipe data yang sama, apabila beda akan mengakibatkan error, karena kalimat merupakan tipe string dan angka merupakan tipe angka.\nangka = 10\nprint(\"angka value is \"+angka)\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-54-83a2ddecb576> in <module>\n      1 angka = 10\n----> 2 print(\"angka value is \"+angka)\n\n\nTypeError: can only concatenate str (not \"int\") to str\nNamun terdapat cara untuk mengubahnya, yaitu dengan mengubah tipe data angka menjadi string atau menggunakan method format\nangka = 10\nprint(\"angka value is \"+str(angka))\nangka value is 10\nangka = 10\nprint(\"angka value is {}\".format(angka))\nangka value is 10\nOperator Perbandingan\nMerupakan operator yang digunakan untuk membandingkan kedua variabel, apabila benar maka akan mengembalikan nilai berupa True dan apabila salah mengembalikan nilai False. Operator ini terdiri dari beberapa jenis seperti: 1. == -> Sama dengan 2. != -> Tidak sama dengan 3. > -> Lebih dari 4. < -> Kurang dari 5. >= -> Lebih dari sama dengan 6. <= -> Kurang dari sama dengan\na = 10\nb = 20\nprint(a<b)\nTrue\na = 50\nb = 30\nprint(a<b)\nFalse\nOperator Logical\nMerupakan operator yang digunakan untuk menghubungkan dua atau lebih operator perbandingan, dimana mengembalikan nilai berupa Trrue dan apabila salah mengembalikan nilai False. Operator ini terdiri dari 2 jenis yaitu: 1. AND -> Mengembalikan nilai True apabila dua kondisi benar, lalu mengembalikan nilai False untuk kebalikannya 2. OR -> Mengembalikan nilai True apabila salah satu kondisi benar, lalu mengembalikan nilai False untuk kebalikannya\nPada code dibawah ini, akan dikembalikan nilai True karena kedua kondisi bernilai benar\na = 10\nprint(a>5 and a<20)\nTrue\nPada code dibawah ini, akan dikembalikan nilai False karena salah satu kondisi bernilai salah\na = 10\nprint(a<5 and a<20)\nFalse\nPada code dibawah ini, akan dikembalikan nilai True karena salah satu kondisi bernilai benar\nb = 30\nprint(b>20 or b<10)\nTrue\nPada code dibawah ini, akan dikembalikan nilai False karena kedua kondisi salah\nb = 30\nprint(b<20 or b<10)\nFalse\nSelection\nSelection pada Python digunakan untuk decision making, seringkali selection ini digunakan untuk mengambil keputusan. Misal apakah a lebih kecil dari b atau sebaliknya.\nPada selection ini, terdapat 3 jenis selection yaitu, If, else, dan elif\nIF\nSeperti namanya “jika”, code ini digunakan untuk pengandaian jika sebuah kondisi tersebut benar. IF sangat sering digunakan untuk menentukan sebuah kondisi, dimana apabila kondisi ini benar, maka sebuah kondisi akan terjadi\nIF sering digabungkan dengan operator perbandingan untuk menentukan bahwa sebuah kondisi akan terjadi\na = 20\nb = 30\nif a < b:\n    print(\"a lebih besar dari b\")\na lebih besar dari b\na = 100.999\nb = 100.98\nif a > b:\n    print(\"a lebih besar dari b\")\na lebih besar dari b\nNOTES: Indentation\nIndentation merupakan jarak spasi atau tab pada awalan isi dari if yang digunakan untuk mendefinisikan cakupan code\nIndentation merupakan hal penting, karena apabila pada selection tidak ada indentation maka akan terdapat error\na = 20\nb = 4099\nif a < b:\nprint(\"a kurang dari b\")\n  File \"<ipython-input-4-194c483dc071>\", line 4\n    print(\"a kurang dari b\")\n    ^\nIndentationError: expected an indented block\nElif\nElif merupakan akronim dari else if, yang memiliki penggambaran bahwa jika kondisi sebelumnya tidak bernilai True, maka coba kondisi berikut\nUntuk menggunakan elif, sebelumnya diharuskan mencantumkan if\nElif bersifat opsional, sehingga tidak wajib dicantumkan\na = 20\nb = 20\nif a < b:\n    print(\"a kurang dari b\")\nelif(a > b):\n    print(\"a lebih dari b\")\nelif(a==b):\n    print(\"a sama dengan b\")\na sama dengan b\na = 100\nb = 120\nif a > b:\n    print(\"Salah\")\nelif(a<b):\n    print(\"Betul\")\nBetul\nElse\nMerupakan sebuah kondisi yang akan dijalankan apabila semua kondisi sebelumnya tidak bernilai True\nUntuk menggunakan else, sebelumnya diharuskan mencantumkan if terlebih dahulu\na = 50\nb = 20\nif a < b:\n    print(\"a kurang dari b\")\nelif(a==b):\n    print(\"a sama dengan b\")\nelse:\n    print(\"a lebih besar dari b\")\na lebih besar dari b\na = 50\nb = 20\nif a < b:\n    print(\"a kurang dari b\")\nelse:\n    print(\"a lebih besar dari b\")\na lebih besar dari b\nNested If\nMerupakan kondisi dimana didalam if statement, terdapat if statement lagi di dalamnya. Nested If seringkali digunakan untuk memberikan sebuah kondisi apabila kondisi lainnya baru terpenuhi.\nd = 20\nif d > 10: \n    print(\"nilai d kurang dari 10\")\n    if d > 15: \n        print(\"nilai d kurang dari 15\")\n        if d < 20: \n            print(\"nilai d kurang dari 20\")\n        else: \n            print(\"nilai d adalah 20\")\n    else:\n        print(\"nilai d lebih dari 15\")\nelse:\n    print(\"nilai d lebih dari 10\")\nnilai d lebih dari 10\nLoop\nMerupakan sebuah tindakan yang dilakukan secara berulang hingga memenuhi suatu kondisi yang telah ditetapkan\nPada Python, terdapat dua jenis loop yaitu While dan For\nWhile\nMerupakan jenis looping yang akan menjalankan sebuah statement selama kondisinya bernilai benar, saat kondisi sudah bernilai salah, maka while loop akan berhenti menjalankan statement tersebut.\nx = 40\nwhile x > 20: #True\n    if(x == 25):\n        print(\"ini 25\")\n    print(x)\n    \n    x -= 5\n40\n35\n30\nini 25\n25\nFor\nMerupakan sebuah tindakan yang dilakukan secara berulang hingga sebuah kondisi terpenuhi, for merupakan jenis looping yang digunakan untuk iterasi/mengakses isi dari sebuah urutan/set seperti list, tuple, dictionary, set ataupun string\nPada code dibawah, merupakan contoh penerapan pada string\ntemp = \"string\"\n\nfor x in temp:\n    print(x)\ns\nt\nr\ni\nn\ng\nPada code dibawah, merupakan contoh penerapan pada list\nList = [\"Red\",\"Black\",\"Blue\",\"Black\"]\nfor x in List:\n    if(x == \"Black\"):\n        print(x)\nBlack\nBlack\nPada code dibawah, menggunakan method range untuk penerapan pada int\nfor x in range(10):\n    print(x)\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nPada code dibawah, merupakan contoh penerapan nested loop\nList1 = [\"Red\",\"Black\",\"Blue\"]\nList2 = [\"Apple\",\"Banana\",\"Orange\"]\n\nfor x in List1: \n    for y in List2:\n            print(x,y)  \nRed Apple\nRed Banana\nRed Orange\nBlack Apple\nBlack Banana\nBlack Orange\nBlue Apple\nBlue Banana\nBlue Orange\nBreak\nMerupakan sebuah statement yang berfungsi untuk memberhentikan sebuah loop sebelum loop terus berjalan hingga selesai.\nPada code dibawah, merupakan penerapan pada while\nx = 2\nwhile x < 50:\n    if x == 25:\n        break\n    print(x)\n    x += 1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nPada code dibawah, merupakan penerapan pada for\nfor x in range(50):\n    if x > 25:\n        break\n    print(x)\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nContinue\nMerupakan sebuah statement yang berfungsi untuk melakukan skip terhadap kondisi tertentu dan langsung melanjutkan ke kondisi berikutnya.\nPada code dibawah, merupakan penerapan pada while\nx = 5\nwhile x < 50:\n    x += 5\n    if x == 30:\n        continue\n    print(x)\n10\n15\n20\n25\n35\n40\n45\n50\nPada code dibawah, merupakan penerapan pada for\nfor x in range(30):\n    if x == 21:\n        continue\n    print(x)\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n22\n23\n24\n25\n26\n27\n28\n29\nFunction\nFunction merupakan sebuah baris code yang hanya bisa berjalan apabila dipanggil dalam sebuah code lain.\nFunction menerima parameter yang bisa diisi dengan tipe data apapun\nPada code dibawah, merupakan contoh sebuah function yang tidak menggunakan parameter\ndef my_function():\n    print(\"Hello World\")\n    \nmy_function()\nHello World\nPada code dibawah, merupakan contoh sebuah function yang menerima parameter\ndef name_function(name):\n    print(\"My name is \"+name)\n    \nname_function(\"John\")\nMy name is John\nPada code dibawah, merupakan contoh menggunakan simbol * sebagai parameter\ndef unlimited_function(*name):\n    for x in name:\n        print(x)\n\nunlimited_function(\"Fajar\", \"Budi\")\nFajar\nBudi\nPada code dibawah, merupakan contoh menggunakan list sebagai parameter dalam function\ndef list_function(name):\n    for x in name:\n        print(x)\n\nmy_name = [\"John\",\"Budi\",\"Richard\"]\n\nlist_function(my_name)\nJohn\nBudi\nRichard\nPada code dibawah, merupakan contoh penggunaan command return\nCommand return digunakan untuk mengembalikan sebuah value\ndef return_function(number):\n    return number + 10\n\nreturn_function(10)\n20\nPada code dibawah, merupakan contoh penerapan recursion\nRecursion merupakan sebuah metode dimana function bisa memanggil dirinya sendiri\ndef x(number):\n    if number > 0:\n        print(number)\n        x(number - 5)\n    else:\n        return 0\n    \nx(40)\n40\n35\n30\n25\n20\n15\n10\n5\nNumpy\nNumPy merupakan salah satu jenis library pada Python yang berhubungan dengan arrays. NumPy merupakan akronim dari Numerical Python\nNumPy sering digunakan karena prosesnya lebih cepat dibandingkan dengan tipe array yang lain seperti list, set atau tuple\nPada code dibawah, merupakan contoh untuk mengimport numpy\nimport numpy as np\nArray\nMerupakan sebuah tempat untuk menampung banyak nilai\nPada code dibawah merupakan contoh untuk membuat array\narray = np.array([1,2,3,4,5])\n\nprint(array)\n[1 2 3 4 5]\nx = np.array([2,4,6,8])\n\nx\narray([2, 4, 6, 8])\nDimension\nDiartikan sebagai level kedalaman dalam sebuah array. Didalam array terdapat beberapa jenis dimensi, mulai dari 0 dimensi array, 1 dimensi array hingga 5 dimensi array\nArray pada contoh sebelumnya termasuk kategori array 1d\nPada code dibawah, merupakan contoh aray 2d\narray2d = np.array([[1,2,3,4,5],[6,7,8,9,10]])\n\nprint(array2d)\n[[ 1  2  3  4  5]\n [ 6  7  8  9 10]]\nUntuk mengetahui dimensi dalam sebuah array, digunakan method ndim\narray2d = np.array([[1,2,3,4,5],[6,7,8,9,10]])\n\nprint(array2d.ndim)\n2\narray2d = np.array([[1,2,3,4,5],[6,7,8,9,10]])\n\nprint(array2d[1,2])\n8\nShape\nDigunakan untuk mengetahui banyaknya elemen dalam setiap dimensi. Method shape akan mengembalikan sebuah tuple dengan setiap index melambangkan isi dari elemen tersebut. Parameter pertama menandakan dimensi, dan parameter kedua menandakan banyaknya isi dari array\narray2d = np.array([[1,2,3,4,5],[6,7,8,9,10]])\n\nprint(array2d.shape)\n(2, 5)\nCopy\nMethod copy melakukan copy terhadap data array nya, jadi apabila terjadi perubahan pada array awalnya tidak terjadi apa – apa\narray = np.array([2,3,4,5,6])\n\narray2 = array.copy()\n\narray2[2] = 15\n\nprint(array)\nprint(array2)\n[2 3 4 5 6]\n[ 2  3 15  5  6]\nx1 = x.copy()\n\nx1[0] = 10\n\nprint(x)\nprint(x1)\n[2 4 6 8]\n[10  4  6  8]\nView\nMethod view hanya melakukan view terhadap data array yang ada, sehingga apabila terjadi perubahan pada data array maka akan berpengaruh pada method view tersebut.\narray = np.array([2,3,4,5,6])\n\narray2 = array.view()\n\narray[1] = 10\n\nprint(array)\nprint(array2)\n[ 2 10  4  5  6]\n[ 2 10  4  5  6]\nJoin\nDigunakan untuk menggabungkan dua buah array dengan menggunakan function concarenate\narray1 = np.array([1,2,3,4,5])\narray2 = np.array([6,7,8,9,10])\n\narray3 = np.concatenate((array1,array2))\n\nprint(array3)\n[ 1  2  3  4  5  6  7  8  9 10]\nZeros and One\nDigunakan untuk membuat array default yang berisi angka satu dan juga nol\nzero_array = np.zeros([3,2,3,4])\n\nprint(zero_array)\n[[[[0. 0. 0. 0.]\n   [0. 0. 0. 0.]\n   [0. 0. 0. 0.]]\n\n  [[0. 0. 0. 0.]\n   [0. 0. 0. 0.]\n   [0. 0. 0. 0.]]]\n\n\n [[[0. 0. 0. 0.]\n   [0. 0. 0. 0.]\n   [0. 0. 0. 0.]]\n\n  [[0. 0. 0. 0.]\n   [0. 0. 0. 0.]\n   [0. 0. 0. 0.]]]\n\n\n [[[0. 0. 0. 0.]\n   [0. 0. 0. 0.]\n   [0. 0. 0. 0.]]\n\n  [[0. 0. 0. 0.]\n   [0. 0. 0. 0.]\n   [0. 0. 0. 0.]]]]\none_array = np.ones([3,2,3])\n\nprint(one_array)\n[[[1. 1. 1.]\n  [1. 1. 1.]]\n\n [[1. 1. 1.]\n  [1. 1. 1.]]\n\n [[1. 1. 1.]\n  [1. 1. 1.]]]\nArange\nDigunakan untuk memberikan angka berurutan sesuai dengan parameter yang diberikan\narray = np.arange(4,12)\n\nprint(array)\n[ 4  5  6  7  8  9 10 11]\nNumpy Ufunc\nUfuncs merupakan singkatan dari Universial Function yang digunakan untuk vectorization di dalam Numpy yang prosesnya lebih cepat dibandingkan proses looping tradisional. Ufunc memudahkan dalam proses operasi matematika\nAdd & Sum\nAdd digunakan untuk menjumlahkan kedua buah array, sedangkan Sum digunakan untuk menjumlahkan keseluruhan nilai keseluruhan array\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = np.add(x,y)\n\nprint(z)\n[ 5  7  9 11]\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = np.sum([x,y])\n\nprint(z)\n\nz_sum = (5+7+9+11)\nprint(z1)\n32\n32\nApabila ditambahkan parameter axis=1, maka penjumlahan akan dilakukan setiap array\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = np.sum([x,y],axis=1)\n\nprint(z)\n\nx1 = (1+2+3+4)\ny1 = (4+5+6+7)\nprint(x1)\nprint(y1)\n[10 22]\n10\n22\nCumsum\nMerupakan singkatan dari cumulative sum, dimana menambahkan setiap nilai secara partial\nx = [1,2,3,4,5]\ny = np.cumsum(x)\n\nprint(y)\n[ 1  3  6 10 15]\nPenjumlahan yang dilakukan yaitu, [1,1+2,1+2+3,1+2+3+4,1+2+3+4+5]\nSubtract\nDigunakan untuk mengurangi kedua buah array\nx = [4,5,3,7]\ny = [1,2,6,4]\nz = np.subtract(y,x)\n\nprint(z)\n[-3 -3  3 -3]\nMultiply & Product\nDigunakan untuk perkalian kedua buah array\nx = [1,2,-3,4]\ny = [4,5,6,7]\nz = np.multiply(y,x)\n\nprint(z)\n[  4  10 -18  28]\nDivision\nDigunakan untuk pembagian kedua buah array\nx = [10,20,30,40]\ny = [1,4,3,5]\nz = np.divide(y,x)\n\nprint(z)\n[0.1   0.2   0.1   0.125]\nPower\nDigunakan untuk melakukan pangkat terhadap sebuah nilai di dalam array\nx = [11,12,13,14,15] #bilangan\ny = [2,2,2,2,2] #pangkat\nz = np.power(x,y)\n\nprint(z)\n[121 144 169 196 225]\nMod\nDigunakan untuk modulus terhadap nilai di dalam array\nx = [11,12,13,14,15,9]\ny = [2,3,4,5,6,3]\nz = np.mod(x,y)\n\nprint(z)\n[1 0 1 4 3 0]\nmodulus atau %. Terkadang saat anda membagi suatu bilangan terhadap bilangan lain, maka anda akan mendapatkan sisa dari pembagian tersebut. Contohnya 7 dibagi 4 itu sama dengan 1¾ kan? Atau kita bisa bilang 7 itu sama dengan 4 dikali 1 ditambah 3. Nah modulus akan mengembalikan nilai 3 tersebut. Contoh lainnya:\n11 % 4 = 3 (11 sama dengan 4 dikali 2 ditambah 3)\n8 % 2 = 0 (8 sama dengan 2 dikali 4 ditambah 0)\n133 % 12 = 1 (132 sama dengan 12 dikali 11 ditambah 1)\nAbsolute\nDigunakan untuk mengabsolut nilai dalam sebuah array\nx = [-100,-200,-300,-400]\nz = np.absolute(x)\n\nprint(z)\n[100 200 300 400]\nAround\nDigunakan untuk pembulatan di bilangan desimal, membulatkan ke satu angka ke atas apabila angka desimal lebih dari sama dengan 5. Menerima parameter berupa angka dan juga berapa jumlah angka di belakang koma\nx = np.around(-5.70909)\ny = np.around(3.49999)\nz = np.around(3.500000)\n\n\nprint(x)\nprint(y)\nprint(z)\n-6.0\n3.0\n4.0\nFloor\nDigunakan untuk membulatkan angka ke pembulatan ke bawah\nx = np.floor(5.70909)\ny = np.floor(3.9999)\nz = np.floor(3.499)\n\nprint(x)\nprint(y)\nprint(z)\n5.0\n3.0\n3.0\nCeil\nDigunakan untuk membulatkan angka ke pembulatan ke atas\nx = np.ceil(5.70909)\ny = np.ceil(3.9999)\nz = np.ceil(3.009)\n\nprint(x)\nprint(y)\nprint(z)\n6.0\n4.0\n4.0\nLog\nPada Numpy juga terdapat function untuk membuat fungsi logaritma pada log 2, 10 dan e\nx = np.array([1,2,3,4,5])\n\nprint(np.log2(x))\n[0.         1.         1.5849625  2.         2.32192809]\nx = np.array([1,2,3,4,5])\n\nprint(np.log10(x))\n[0.         0.30103    0.47712125 0.60205999 0.69897   ]\nx = np.array([1,2,3,4,5])\n\nprint(np.log(x))\n[0.         0.69314718 1.09861229 1.38629436 1.60943791]\nRandom\nRandom merupakan sebuah method dalam library NumPy yang dapat memberikan angka baik itu numeric ataupun integer acak sesuai dengan kebutuhan\nUntuk mengaksesnya, diperlukan method from\nfrom numpy import random\nRandint\nDigunakan untuk memberikan angka acak berupa integer atau angka bulat\ntemp = random.randint(50)\n\nprint(temp)\n21\nApabila menginginkan angka random berupa array, digunakan parameter size\ntemp = random.randint(20,size=10)\n\nprint(temp)\n[13 11  7 16 18  8  4  9 11 10]\nRand\nDigunakan untuk memberikan angka acak berupa float atau angka desimal\ntemp = random.rand()\n\nprint(temp)\n0.017671857586624262\nApabila menginginkan angka acak lebih dari satu, bisa menambahkan parameter berupa banyaknya angka yang diinginkan\ntemp = random.rand(5)\n\nprint(temp)\n[0.43980494 0.82687572 0.24125122 0.0124948  0.11006097]\nChoice\nDigunakan untuk mengambil angka dari list yang diberikan dan bisa ditentukan banyaknya data yang diinginkan serta dimensi yang diinginkan\ntemp = random.choice([2,4,8,10,12],size=(5,15))\n\nprint(temp)\n[[12 10  8 10 10 10 10  8 10  8  2  4  2 10 12]\n [ 8 12 10 12 12 12  8 10 12  2 12 12  2 12  2]\n [ 8  2  4  2  4 12  2  2  4 12 12  4 10 12 10]\n [ 8 10  8 10 12 12  2 10  2 10  2  4  4  4 10]\n [ 4  8 12  8 12  4  8  2 10 10  4  2 10  4 12]]\nPada choice, juga dapat diberikan sebuah parameter untuk menentukan berapa probabilitas dari setiap angka untuk dipilih, namun jumlah keseluruhan probabilitas harus berjumlah 1\n# 0.2 0.4 0.2 0.1 0.1\ntemp = random.choice([1,3,5,7,9], p=[0.1,0.5,0.1,0.2,0.1],size=(5,20))\n\nprint(temp)\n[[3 1 3 7 5 3 7 5 7 9 9 7 3 9 7 1 3 5 7 3]\n [7 3 3 3 3 3 3 3 5 1 7 7 7 7 5 3 3 7 3 3]\n [3 1 7 3 7 7 9 1 3 5 7 3 3 5 9 3 3 3 3 9]\n [1 3 1 7 3 3 5 3 3 7 3 3 3 7 9 3 9 3 3 9]\n [3 1 3 3 3 3 3 7 9 3 3 9 3 3 1 5 9 7 3 1]]\nShuffle & Permutation\nMerupakan metode yang digunakan untuk mengubah urutan array yang sudah ada. Method shuffle mengubah urutan array original sedangkan metode permutation tidak mengubah urutan array original\narr = np.array([1,2,3,4,5])\nprint(arr)\n\nrandom.shuffle(arr)\nprint(arr)\n[1 2 3 4 5]\n[5 3 2 4 1]\narr = np.array([1,2,3,4,5])\nprint(arr)\n\nprint(random.permutation(arr)) \nprint(arr)\n[1 2 3 4 5]\n[1 5 4 2 3]\n[1 2 3 4 5]\nPandas\nPandas merupakan salah satu library pada python yang digunakan untuk bekerja dengan data sets.\nPandas memiliki beberapa fungsi untuk menganalisa, membersihkan(cleaning), mengeksplor serta memanipulasi data.\nAlasan pandas digunakan karena fitur panda yang bisa membantu untuk menganalisa data yang besar dan membuat konklusi berdasarkan teori statistik yang ada\nUntuk mengaksesnya terlebih dahulu harus mengimport library pandas\nimport pandas as pd\nSeries\nPandas memiliki method yang bernama series, fungsinya mirip dengan table yang berupa sebuah 1d array yang bisa menampung tipe data apa saja.\nPada code dibawah, merupakan contoh penerapan series\nexample_list = [5,6,7,8]\n\nser = pd.Series(example_list)\n\nprint(ser)\n0    5\n1    6\n2    7\n3    8\ndtype: int64\ntemp = [1,2,3,4,5]\n\nser = pd.Series(temp,index=['pertama','kedua','c','Alpha','Betta'])\n\nprint(ser)\npertama    1\nkedua      2\nc          3\nAlpha      4\nBetta      5\ndtype: int64\nData Frame\nMerupakan sebuah data set di library pandas yang biasanya berbentuk 2d array table, apabila series seperti kolom maka DataFrame seperti keseluruhan tabel.\ndata = {\n    'duration' : [10,20,30,40,50],\n    'calories' : [100,200,300,400,500]\n}\n\ndf = pd.DataFrame(data, index=['pertama','kedua','ketiga','keempat','kelima'])\n\nprint(df)\n         duration  calories\npertama        10       100\nkedua          20       200\nketiga         30       300\nkeempat        40       400\nkelima         50       500\nRead\nMerupakan sebuah method yang digunakan untuk membaca sebuah file csv(comma separated files) atau file yang dipisah dengan koma. CSV file mengandung plain text dengan format yang bisa dibaca oleh siapapun termasuk pandas.\nTerdapat sebuah file csv yang bernama dirtydata pada folder\ndata = pd.read_csv(\"data/dirtydata.csv\")\ndata_input = pd.read_csv(\"data/dirtydata.csv\")\ndata_input1 = data_input.copy\nShow Data\nData yang kita baca tadi disimpan kedalam sebuah variabel yang bernama retail, untuk menampilkannya hanya ketik variabel retail pada cell\ndata\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘2020/12/01’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘2020/12/02’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘2020/12/03’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘2020/12/06’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘2020/12/07’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n‘2020/12/08’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘2020/12/09’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘2020/12/10’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘2020/12/11’\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n‘2020/12/13’\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n‘2020/12/14’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n‘2020/12/15’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘2020/12/16’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n‘2020/12/17’\n\n\n100\n\n\n120\n\n\n300.0\n\n\n18\n\n\n45\n\n\n‘2020/12/18’\n\n\n90\n\n\n112\n\n\nNaN\n\n\n19\n\n\n60\n\n\n‘2020/12/19’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n‘2020/12/20’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n‘2020/12/21’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n22\n\n\n45\n\n\nNaN\n\n\n100\n\n\n119\n\n\n282.0\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n‘2020/12/24’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n‘2020/12/25’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n‘2020/12/27’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n28\n\n\n60\n\n\n‘2020/12/28’\n\n\n103\n\n\n132\n\n\nNaN\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘2020/12/30’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘2020/12/31’\n\n\n92\n\n\n115\n\n\n243.0\n\n\nUntuk menampilkan beberapa data saja dari atas, gunakan method head\ndata.head(5)\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘2020/12/01’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘2020/12/02’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘2020/12/03’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\nUntuk menampilkan beberapa data saja dari bawah, gunakan method tail. Namun urutan tidak terubah\ndata.tail(5)\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n27\n\n\n60\n\n\n‘2020/12/27’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n28\n\n\n60\n\n\n‘2020/12/28’\n\n\n103\n\n\n132\n\n\nNaN\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘2020/12/30’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘2020/12/31’\n\n\n92\n\n\n115\n\n\n243.0\n\n\nUntuk menampilkan tipe data dari table, digunakan method dtype\ndata.dtypes\nDuration      int64\nDate         object\nPulse         int64\nMaxpulse      int64\nCalories    float64\ndtype: object\nUntuk melihat informasi terhadap dataframe, digunakan method info()\ndata.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 32 entries, 0 to 31\nData columns (total 5 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Duration  32 non-null     int64  \n 1   Date      31 non-null     object \n 2   Pulse     32 non-null     int64  \n 3   Maxpulse  32 non-null     int64  \n 4   Calories  30 non-null     float64\ndtypes: float64(1), int64(3), object(1)\nmemory usage: 1.4+ KB\nUntuk menampilkan data mengenai perhitungan numeric terhadap data, digunakan method describe\ndata.describe()\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\ncount\n\n\n32.000000\n\n\n32.000000\n\n\n32.000000\n\n\n30.000000\n\n\nmean\n\n\n68.437500\n\n\n103.500000\n\n\n128.500000\n\n\n304.680000\n\n\nstd\n\n\n70.039591\n\n\n7.832933\n\n\n12.998759\n\n\n66.003779\n\n\nmin\n\n\n30.000000\n\n\n90.000000\n\n\n101.000000\n\n\n195.100000\n\n\n25%\n\n\n60.000000\n\n\n100.000000\n\n\n120.000000\n\n\n250.700000\n\n\n50%\n\n\n60.000000\n\n\n102.500000\n\n\n127.500000\n\n\n291.200000\n\n\n75%\n\n\n60.000000\n\n\n106.500000\n\n\n132.250000\n\n\n343.975000\n\n\nmax\n\n\n450.000000\n\n\n130.000000\n\n\n175.000000\n\n\n479.000000\n\n\nUntuk menampilkan kolom apa saja yang terdapat dalam dataset, digunakan method columns\ndata.columns\nIndex(['Duration', 'Date', 'Pulse', 'Maxpulse', 'Calories'], dtype='object')\nApabila ingin menyalin sebuah dataset, digunakan method copy\ndataset = data.copy()\ndataset\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘2020/12/01’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘2020/12/02’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘2020/12/03’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘2020/12/06’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘2020/12/07’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n‘2020/12/08’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘2020/12/09’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘2020/12/10’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘2020/12/11’\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n‘2020/12/13’\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n‘2020/12/14’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n‘2020/12/15’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘2020/12/16’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n‘2020/12/17’\n\n\n100\n\n\n120\n\n\n300.0\n\n\n18\n\n\n45\n\n\n‘2020/12/18’\n\n\n90\n\n\n112\n\n\nNaN\n\n\n19\n\n\n60\n\n\n‘2020/12/19’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n‘2020/12/20’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n‘2020/12/21’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n22\n\n\n45\n\n\nNaN\n\n\n100\n\n\n119\n\n\n282.0\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n‘2020/12/24’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n‘2020/12/25’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n‘2020/12/27’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n28\n\n\n60\n\n\n‘2020/12/28’\n\n\n103\n\n\n132\n\n\nNaN\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘2020/12/30’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘2020/12/31’\n\n\n92\n\n\n115\n\n\n243.0\n\n\nUntuk mengakses spesifik tipe data, dapat digunakan method loc\ndata.loc[10,'Maxpulse']\n147\ndata.loc[5]\nDuration              60\nDate        '2020/12/06'\nPulse                102\nMaxpulse             127\nCalories             300\nName: 5, dtype: object\ndata.loc[2:10,]\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n2\n\n\n60\n\n\n‘2020/12/03’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘2020/12/06’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘2020/12/07’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n‘2020/12/08’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘2020/12/09’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘2020/12/10’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘2020/12/11’\n\n\n103\n\n\n147\n\n\n329.3\n\n\nUntuk mendapatkan data acak, dapat digunakan method sample\ndata.sample(10)\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n14\n\n\n60\n\n\n‘2020/12/14’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n22\n\n\n45\n\n\nNaN\n\n\n100\n\n\n119\n\n\n282.0\n\n\n1\n\n\n60\n\n\n‘2020/12/02’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n18\n\n\n45\n\n\n‘2020/12/18’\n\n\n90\n\n\n112\n\n\nNaN\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n15\n\n\n60\n\n\n‘2020/12/15’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘2020/12/16’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n25\n\n\n60\n\n\n‘2020/12/25’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n5\n\n\n60\n\n\n‘2020/12/06’\n\n\n102\n\n\n127\n\n\n300.0\n\n\nUntuk mengurutkan data, dapat digunakan method sort_values\ndata.sort_values('Duration').head(10)\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n8\n\n\n30\n\n\n‘2020/12/09’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n20\n\n\n45\n\n\n‘2020/12/20’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n22\n\n\n45\n\n\nNaN\n\n\n100\n\n\n119\n\n\n282.0\n\n\n18\n\n\n45\n\n\n‘2020/12/18’\n\n\n90\n\n\n112\n\n\nNaN\n\n\n24\n\n\n45\n\n\n‘2020/12/24’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n19\n\n\n60\n\n\n‘2020/12/19’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n21\n\n\n60\n\n\n‘2020/12/21’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\ndata.sort_values('Duration',ascending=False).head(10)\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n7\n\n\n450\n\n\n‘2020/12/08’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n0\n\n\n60\n\n\n‘2020/12/01’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n15\n\n\n60\n\n\n‘2020/12/15’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n30\n\n\n60\n\n\n‘2020/12/30’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n28\n\n\n60\n\n\n‘2020/12/28’\n\n\n103\n\n\n132\n\n\nNaN\n\n\n27\n\n\n60\n\n\n‘2020/12/27’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n25\n\n\n60\n\n\n‘2020/12/25’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\nMedian, Mean, Sum\nDalam pandas, terdapat method yang digunakan untuk perhitungan untuk mencari total keseluruhan, rata - rata dan juga nilai tengah\ndata['Maxpulse'].sum()\n4112\ndata['Pulse'].mean()\n103.5\ndata['Duration'].median()\n60.0\nAggregation\nMerupakan sebuah function yang digunakan untuk mengelompokkan kolom sesuai dengan parameter yang diinginkan, bisa dihitung menggunakan sum, mean atau yang lain\nduration = data.groupby('Duration').mean()\nduration\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\nDuration\n\n\n\n\n\n\n\n\n30\n\n\n109.000000\n\n\n133.000000\n\n\n195.10000\n\n\n45\n\n\n107.000000\n\n\n145.000000\n\n\n294.35000\n\n\n60\n\n\n103.391304\n\n\n126.173913\n\n\n314.46087\n\n\n450\n\n\n104.000000\n\n\n134.000000\n\n\n253.30000\n\n\npulse = data.groupby('Duration')['Pulse'] .mean()\npulse\nDuration\n30     109.000000\n45     107.000000\n60     103.391304\n450    104.000000\nName: Pulse, dtype: float64\nClean Data\nMerupakan sebuah metode dalam memperbaiki data yang “jelek” di sebuah data set.\nUntuk mengecek apakah ada data yang kosong pada dataframe\ndata.isna().sum()Apabila mengembalikan nilai True, maka berarti bahwa terdapat data yang kosong. Apabila false maka tidak ada\ndata.isna().sum()\nDuration    0\nDate        1\nPulse       0\nMaxpulse    0\nCalories    2\ndtype: int64\ndata.isna().any()\nDuration    False\nDate         True\nPulse       False\nMaxpulse    False\nCalories     True\ndtype: bool\nUntuk memperbaiki data yang kosong, bisa dengan dua cara yaitu menghapusnya atau memberikan nilai pada data kosong tersebut\nPada code dibawah, merupakan contoh apabila menghapus data\ndata.dropna(inplace=True) -> data = data.dropna()\ndataset.dropna(inplace=True)\ndata = data.dropna()\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘2020/12/01’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘2020/12/02’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘2020/12/03’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘2020/12/06’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘2020/12/07’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n‘2020/12/08’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘2020/12/09’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘2020/12/10’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘2020/12/11’\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n‘2020/12/13’\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n‘2020/12/14’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n‘2020/12/15’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘2020/12/16’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n‘2020/12/17’\n\n\n100\n\n\n120\n\n\n300.0\n\n\n19\n\n\n60\n\n\n‘2020/12/19’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n‘2020/12/20’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n‘2020/12/21’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n‘2020/12/24’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n‘2020/12/25’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n‘2020/12/27’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘2020/12/30’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘2020/12/31’\n\n\n92\n\n\n115\n\n\n243.0\n\n\ndataset\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘2020/12/01’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘2020/12/02’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘2020/12/03’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘2020/12/06’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘2020/12/07’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n‘2020/12/08’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘2020/12/09’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘2020/12/10’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘2020/12/11’\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n‘2020/12/13’\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n‘2020/12/14’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n‘2020/12/15’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘2020/12/16’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n‘2020/12/17’\n\n\n100\n\n\n120\n\n\n300.0\n\n\n19\n\n\n60\n\n\n‘2020/12/19’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n‘2020/12/20’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n‘2020/12/21’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n‘2020/12/24’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n‘2020/12/25’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n‘2020/12/27’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘2020/12/30’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘2020/12/31’\n\n\n92\n\n\n115\n\n\n243.0\n\n\ndata\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘2020/12/01’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘2020/12/02’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘2020/12/03’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘2020/12/06’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘2020/12/07’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n‘2020/12/08’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘2020/12/09’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘2020/12/10’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘2020/12/11’\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n‘2020/12/13’\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n‘2020/12/14’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n‘2020/12/15’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘2020/12/16’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n‘2020/12/17’\n\n\n100\n\n\n120\n\n\n300.0\n\n\n19\n\n\n60\n\n\n‘2020/12/19’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n‘2020/12/20’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n‘2020/12/21’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n‘2020/12/24’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n‘2020/12/25’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n‘2020/12/27’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘2020/12/30’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘2020/12/31’\n\n\n92\n\n\n115\n\n\n243.0\n\n\nPada code dibawah, merupakan contoh memberikan isi pada data kosong tersebut\ndf =  pd.read_csv(\"data/dirtydata.csv\")\ndf\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘2020/12/01’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘2020/12/02’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘2020/12/03’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘2020/12/06’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘2020/12/07’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n‘2020/12/08’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘2020/12/09’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘2020/12/10’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘2020/12/11’\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n‘2020/12/13’\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n‘2020/12/14’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n‘2020/12/15’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘2020/12/16’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n‘2020/12/17’\n\n\n100\n\n\n120\n\n\n300.0\n\n\n18\n\n\n45\n\n\n‘2020/12/18’\n\n\n90\n\n\n112\n\n\nNaN\n\n\n19\n\n\n60\n\n\n‘2020/12/19’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n‘2020/12/20’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n‘2020/12/21’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n22\n\n\n45\n\n\nNaN\n\n\n100\n\n\n119\n\n\n282.0\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n‘2020/12/24’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n‘2020/12/25’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n‘2020/12/27’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n28\n\n\n60\n\n\n‘2020/12/28’\n\n\n103\n\n\n132\n\n\nNaN\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘2020/12/30’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘2020/12/31’\n\n\n92\n\n\n115\n\n\n243.0\n\n\nnewdf3 = df.copy()\nnewdf3['Date'] = newdf3['Date'].fillna('2020/12/22')\nnewdf3\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘2020/12/01’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘2020/12/02’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘2020/12/03’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘2020/12/06’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘2020/12/07’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n‘2020/12/08’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘2020/12/09’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘2020/12/10’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘2020/12/11’\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n‘2020/12/13’\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n‘2020/12/14’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n‘2020/12/15’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘2020/12/16’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n‘2020/12/17’\n\n\n100\n\n\n120\n\n\n300.0\n\n\n18\n\n\n45\n\n\n‘2020/12/18’\n\n\n90\n\n\n112\n\n\nNaN\n\n\n19\n\n\n60\n\n\n‘2020/12/19’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n‘2020/12/20’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n‘2020/12/21’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n22\n\n\n45\n\n\n2020/12/22\n\n\n100\n\n\n119\n\n\n282.0\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n‘2020/12/24’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n‘2020/12/25’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n‘2020/12/27’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n28\n\n\n60\n\n\n‘2020/12/28’\n\n\n103\n\n\n132\n\n\nNaN\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘2020/12/30’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘2020/12/31’\n\n\n92\n\n\n115\n\n\n243.0\n\n\nnewdf3['Date'] = newdf3['Date'].str.replace('/','')\nnewdf3\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘20201201’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘20201202’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘20201203’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘20201204’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘20201205’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘20201206’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘20201207’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n60\n\n\n‘20201208’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘20201209’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘20201210’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘20201211’\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n‘20201212’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n‘20201212’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n‘20201213’\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n‘20201214’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n‘20201215’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘20201216’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n‘20201217’\n\n\n100\n\n\n120\n\n\n300.0\n\n\n18\n\n\n45\n\n\n‘20201218’\n\n\n90\n\n\n112\n\n\n200.0\n\n\n19\n\n\n60\n\n\n‘20201219’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n‘20201220’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n‘20201221’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n22\n\n\n45\n\n\nNaN\n\n\n100\n\n\n119\n\n\n282.0\n\n\n23\n\n\n60\n\n\n‘20201223’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n‘20201224’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n‘20201225’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n‘20201227’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n28\n\n\n60\n\n\n‘20201228’\n\n\n103\n\n\n132\n\n\n200.0\n\n\n29\n\n\n60\n\n\n‘20201229’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘20201230’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘20201231’\n\n\n92\n\n\n115\n\n\n243.0\n\n\nnewdf3.isna().any()\nDuration    False\nDate         True\nPulse       False\nMaxpulse    False\nCalories    False\ndtype: bool\nApabila terdapat data dengan format date yang , bisa menggunakan method to_datetime\nnewdf4 = data.copy()\nnewdf4['Date'] = pd.to_datetime(newdf4['Date'])\nnewdf4\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n2020-12-01\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n2020-12-02\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n2020-12-03\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n2020-12-04\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n2020-12-05\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n2020-12-06\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n2020-12-07\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n2020-12-08\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n2020-12-09\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n2020-12-10\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n2020-12-11\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n2020-12-12\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n2020-12-12\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n2020-12-13\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n2020-12-14\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n2020-12-15\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n2020-12-16\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n2020-12-17\n\n\n100\n\n\n120\n\n\n300.0\n\n\n18\n\n\n45\n\n\n2020-12-18\n\n\n90\n\n\n112\n\n\nNaN\n\n\n19\n\n\n60\n\n\n2020-12-19\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n2020-12-20\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n2020-12-21\n\n\n108\n\n\n131\n\n\n364.2\n\n\n22\n\n\n45\n\n\nNaT\n\n\n100\n\n\n119\n\n\n282.0\n\n\n23\n\n\n60\n\n\n2020-12-23\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n2020-12-24\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n2020-12-25\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n2020-12-26\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n2020-12-27\n\n\n92\n\n\n118\n\n\n241.0\n\n\n28\n\n\n60\n\n\n2020-12-28\n\n\n103\n\n\n132\n\n\nNaN\n\n\n29\n\n\n60\n\n\n2020-12-29\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n2020-12-30\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n2020-12-31\n\n\n92\n\n\n115\n\n\n243.0\n\n\nnewdf4 = data.copy()\nnewdf4['Date'] = newdf4['Date'].str.replace('/','')\nnewdf4\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘20201201’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘20201202’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘20201203’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘20201204’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘20201205’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘20201206’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘20201207’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n‘20201208’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘20201209’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘20201210’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘20201211’\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n‘20201212’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n‘20201212’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n‘20201213’\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n‘20201214’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n‘20201215’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘20201216’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n‘20201217’\n\n\n100\n\n\n120\n\n\n300.0\n\n\n18\n\n\n45\n\n\n‘20201218’\n\n\n90\n\n\n112\n\n\nNaN\n\n\n19\n\n\n60\n\n\n‘20201219’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n‘20201220’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n‘20201221’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n22\n\n\n45\n\n\nNaN\n\n\n100\n\n\n119\n\n\n282.0\n\n\n23\n\n\n60\n\n\n‘20201223’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n‘20201224’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n‘20201225’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n‘20201227’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n28\n\n\n60\n\n\n‘20201228’\n\n\n103\n\n\n132\n\n\nNaN\n\n\n29\n\n\n60\n\n\n‘20201229’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘20201230’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘20201231’\n\n\n92\n\n\n115\n\n\n243.0\n\n\nnewdf4.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 32 entries, 0 to 31\nData columns (total 5 columns):\n #   Column    Non-Null Count  Dtype         \n---  ------    --------------  -----         \n 0   Duration  32 non-null     int64         \n 1   Date      31 non-null     datetime64[ns]\n 2   Pulse     32 non-null     int64         \n 3   Maxpulse  32 non-null     int64         \n 4   Calories  30 non-null     float64       \ndtypes: datetime64[ns](1), float64(1), int64(3)\nmemory usage: 1.4 KB\nUntuk mengubah data, juga bisa menggunakan method astype\nnewdf5 = data.copy()\nnewdf5.dropna(inplace=True)\nnewdf5['Calories'] = newdf5['Calories'].astype(int)\nnewdf5.dtypes\nDuration     int64\nDate        object\nPulse        int64\nMaxpulse     int64\nCalories     int64\ndtype: object\nApabila terdapat format NaT, maka itu merupakan akronim dari Not a Time dan bisa dihapus\nnewdf3 = data.copy()\nnewdf3.dropna(subset=['Date'], inplace = True)\nnewdf3\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\n0\n\n\n60\n\n\n‘2020/12/01’\n\n\n110\n\n\n130\n\n\n409.1\n\n\n1\n\n\n60\n\n\n‘2020/12/02’\n\n\n117\n\n\n145\n\n\n479.0\n\n\n2\n\n\n60\n\n\n‘2020/12/03’\n\n\n103\n\n\n135\n\n\n340.0\n\n\n3\n\n\n45\n\n\n‘2020/12/04’\n\n\n109\n\n\n175\n\n\n282.4\n\n\n4\n\n\n45\n\n\n‘2020/12/05’\n\n\n117\n\n\n148\n\n\n406.0\n\n\n5\n\n\n60\n\n\n‘2020/12/06’\n\n\n102\n\n\n127\n\n\n300.0\n\n\n6\n\n\n60\n\n\n‘2020/12/07’\n\n\n110\n\n\n136\n\n\n374.0\n\n\n7\n\n\n450\n\n\n‘2020/12/08’\n\n\n104\n\n\n134\n\n\n253.3\n\n\n8\n\n\n30\n\n\n‘2020/12/09’\n\n\n109\n\n\n133\n\n\n195.1\n\n\n9\n\n\n60\n\n\n‘2020/12/10’\n\n\n98\n\n\n124\n\n\n269.0\n\n\n10\n\n\n60\n\n\n‘2020/12/11’\n\n\n103\n\n\n147\n\n\n329.3\n\n\n11\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n12\n\n\n60\n\n\n‘2020/12/12’\n\n\n100\n\n\n120\n\n\n250.7\n\n\n13\n\n\n60\n\n\n‘2020/12/13’\n\n\n106\n\n\n128\n\n\n345.3\n\n\n14\n\n\n60\n\n\n‘2020/12/14’\n\n\n104\n\n\n132\n\n\n379.3\n\n\n15\n\n\n60\n\n\n‘2020/12/15’\n\n\n98\n\n\n123\n\n\n275.0\n\n\n16\n\n\n60\n\n\n‘2020/12/16’\n\n\n98\n\n\n120\n\n\n215.2\n\n\n17\n\n\n60\n\n\n‘2020/12/17’\n\n\n100\n\n\n120\n\n\n300.0\n\n\n19\n\n\n60\n\n\n‘2020/12/19’\n\n\n103\n\n\n123\n\n\n323.0\n\n\n20\n\n\n45\n\n\n‘2020/12/20’\n\n\n97\n\n\n125\n\n\n243.0\n\n\n21\n\n\n60\n\n\n‘2020/12/21’\n\n\n108\n\n\n131\n\n\n364.2\n\n\n23\n\n\n60\n\n\n‘2020/12/23’\n\n\n130\n\n\n101\n\n\n300.0\n\n\n24\n\n\n45\n\n\n‘2020/12/24’\n\n\n105\n\n\n132\n\n\n246.0\n\n\n25\n\n\n60\n\n\n‘2020/12/25’\n\n\n102\n\n\n126\n\n\n334.5\n\n\n26\n\n\n60\n\n\n20201226\n\n\n100\n\n\n120\n\n\n250.0\n\n\n27\n\n\n60\n\n\n‘2020/12/27’\n\n\n92\n\n\n118\n\n\n241.0\n\n\n29\n\n\n60\n\n\n‘2020/12/29’\n\n\n100\n\n\n132\n\n\n280.0\n\n\n30\n\n\n60\n\n\n‘2020/12/30’\n\n\n102\n\n\n129\n\n\n380.3\n\n\n31\n\n\n60\n\n\n‘2020/12/31’\n\n\n92\n\n\n115\n\n\n243.0\n\n\nApabila terdapat data yang berbeda(terlalu besar atau terlalu kecil), maka bisa dibuat sebuah loop/batasan\nfor x in newdf3.index:\n    if newdf3.loc[x,'Duration'] > 60:\n        newdf3.loc[x,'Duration'] = 60\nnewdf3.groupby('Duration').count()\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\nDuration\n\n\n\n\n\n\n\n\n\n\n30\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n45\n\n\n4\n\n\n4\n\n\n4\n\n\n4\n\n\n60\n\n\n24\n\n\n24\n\n\n24\n\n\n24\n\n\nUntuk mengecek apakah ada data yang duplikat pada dataset, digunakan method duplicated(). Mengembalikan nilai True apabila ada, dan nilai False apabila tidak ada\nnewdf = data.copy()\nnewdf.duplicated()\n0     False\n1     False\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n12     True\n13    False\n14    False\n15    False\n16    False\n17    False\n19    False\n20    False\n21    False\n23    False\n24    False\n25    False\n26    False\n27    False\n29    False\n30    False\n31    False\ndtype: bool\nUntuk menghapus data duplikat yang ada, digunakan method drop_duplicates\nnewdf = data.copy()\nnewdf.drop_duplicates(inplace=True)\nnewdf.duplicated()\n0     False\n1     False\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n13    False\n14    False\n15    False\n16    False\n17    False\n19    False\n20    False\n21    False\n23    False\n24    False\n25    False\n26    False\n27    False\n29    False\n30    False\n31    False\ndtype: bool\ndata.describe()\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDuration\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\ncount\n\n\n29.000000\n\n\n29.000000\n\n\n29.000000\n\n\n29.000000\n\n\nmean\n\n\n70.344828\n\n\n104.103448\n\n\n129.275862\n\n\n305.462069\n\n\nstd\n\n\n73.386587\n\n\n7.784347\n\n\n13.155381\n\n\n67.030470\n\n\nmin\n\n\n30.000000\n\n\n92.000000\n\n\n101.000000\n\n\n195.100000\n\n\n25%\n\n\n60.000000\n\n\n100.000000\n\n\n120.000000\n\n\n250.700000\n\n\n50%\n\n\n60.000000\n\n\n103.000000\n\n\n128.000000\n\n\n300.000000\n\n\n75%\n\n\n60.000000\n\n\n108.000000\n\n\n133.000000\n\n\n345.300000\n\n\nmax\n\n\n450.000000\n\n\n130.000000\n\n\n175.000000\n\n\n479.000000\n\n\ndata.groupby('Duration').mean()\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\nDuration\n\n\n\n\n\n\n\n\n30\n\n\n109.000000\n\n\n133.000000\n\n\n195.10000\n\n\n45\n\n\n107.000000\n\n\n145.000000\n\n\n294.35000\n\n\n60\n\n\n103.391304\n\n\n126.173913\n\n\n314.46087\n\n\n450\n\n\n104.000000\n\n\n134.000000\n\n\n253.30000\n\n\ndata.groupby('Duration').count()\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\nDate\n\n\nPulse\n\n\nMaxpulse\n\n\nCalories\n\n\nDuration\n\n\n\n\n\n\n\n\n\n\n30\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n45\n\n\n5\n\n\n6\n\n\n6\n\n\n5\n\n\n60\n\n\n24\n\n\n24\n\n\n24\n\n\n23\n\n\n450\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-11-17T21:33:57+07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-02-wicked-tuna/",
    "title": "Wicked Tuna",
    "description": "Atlantic Bluefin Tuna now is endangered because overexploited, I want to find out current condition.",
    "author": [
      {
        "name": "Fajar Nugroho",
        "url": "https://fajardwnugroho.com/"
      }
    ],
    "date": "2021-08-02",
    "categories": [
      "R",
      "Data Analysis",
      "Fisheries"
    ],
    "contents": "\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill at https://rstudio.github.io/distill.\n1. Intro\n1.1 Greetings\nHelo, Welcome to My Rmd In this Rmd I would explore about Tuna\n1.2 Brief\nI want to visualize some graphs to inform a Tuna condition\n1.3 Problem Background\nAtlantic Bluefin Tuna now is endangered because overexploited, I want to find out current condition.  1. Which species are the most exploited?  2. Which countries exploit the most?  3. What is the solution to the current condition?\n\n\n\nFigure 1: Red List Tuna.\n\n\n\n1.4 Library\n\n\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(ggthemes)\nlibrary(plotly)\n\n\n\n1.5 Dataset\nDataset is from FAO Fisheries Division  “FAO Aquaculture, Capture and Global production databases with data from 1950 to 2018”\n\n\ncountry <- read_csv(\"input_fish/CL_FI_COUNTRY_GROUPS.csv\")\nproduction <- read_csv(\"input_fish/CL_FI_PRODUCTION_SOURCE.csv\")\nspecies <- read_csv(\"input_fish/CL_FI_SPECIES_GROUPS.csv\")\nsymbol <- read_csv(\"input_fish/CL_FI_SYMBOL.csv\")\nunit <- read_csv(\"input_fish/CL_FI_UNIT.csv\")\nwaterarea <- read_csv(\"input_fish/CL_FI_WATERAREA_GROUPS.csv\")\nTS <- read_csv(\"input_fish/TS_FI_PRODUCTION.csv\")\n\n\n\n2. Data Wrangling\n2.1 Filter the Species\nI looking for the names of colomn\n\n\nnames(species) #Check colomn names\n\n\n [1] \"3Alpha_Code\"     \"Taxonomic_Code\"  \"Identifier\"     \n [4] \"Name_En\"         \"Name_Fr\"         \"Name_Es\"        \n [7] \"Name_Ar\"         \"Name_Cn\"         \"Name_Ru\"        \n[10] \"Scientific_Name\" \"Author\"          \"Family\"         \n[13] \"Order\"           \"Major_Group\"     \"Yearbook_Group\" \n[16] \"ISSCAAP_Group\"   \"CPC_Class\"       \"CPC_Group\"      \n\nI use three colomn ‘3Alpha_Code’, Name_En and Scientific_Name to extract the code\n\n\nNama_Tuna <- species %>% \n  select('3Alpha_Code', Name_En, Scientific_Name) %>% \n  filter(Name_En %in% c(\"Atlantic bluefin tuna\", \"Southern bluefin tuna\", \"Pacific bluefin tuna\", \"Bigeye tuna\", \"Albacore\", \"Longtail tuna\", \"Blackfin tuna\", \"Yellowfin tuna\")) #Filtering species\n\n\n\nSpecies\n\n\nNama_Tuna\n\n\n# A tibble: 8 x 3\n  `3Alpha_Code` Name_En               Scientific_Name   \n  <chr>         <chr>                 <chr>             \n1 BFT           Atlantic bluefin tuna Thunnus thynnus   \n2 PBF           Pacific bluefin tuna  Thunnus orientalis\n3 LOT           Longtail tuna         Thunnus tonggol   \n4 BLF           Blackfin tuna         Thunnus atlanticus\n5 ALB           Albacore              Thunnus alalunga  \n6 SBF           Southern bluefin tuna Thunnus maccoyii  \n7 YFT           Yellowfin tuna        Thunnus albacares \n8 BET           Bigeye tuna           Thunnus obesus    \n\nThe code has been extracted, next replace the code with species names\nDecode - Encode\nI use Time Series dataset from 1950 to 2018\n\n\nTUNA <- TS %>% \n  filter(SPECIES %in% c(\"BFT\", \n                        \"PBF\", \n                        \"LOT\", \n                        \"BLF\", \n                        \"ALB\", \n                        \"SBF\", \n                        \"YFT\", \n                        \"BET\"),\n         YEAR %in% 1950:2018)\n\n\n\nReplacing\nI using sapply function for this step\n\n\nTUNA$SPECIES <- sapply(as.character(TUNA$SPECIES), switch, \n                       \"BFT\" = \"Atlantic Bluefin Tuna\",\n                       \"PBF\" = \"Pacific Bluefin Tuna\", \n                       \"LOT\" = \"Longtail Tuna\", \n                       \"BLF\" = \"Blackfin Tuna\", \n                       \"ALB\" = \"Albacore\",\n                       \"SBF\" = \"Southern Bluefin Tuna\", \n                       \"YFT\" = \"Yellowfin Tuna\",\n                       \"BET\" = \"Bigeye Tuna\")\n\n\n\n2.2 The Country\nNow, country who harvesting Tuna. There are 21 top country I got from FAO and then I filtering from country dataset\n\n\ntopFAO <- country %>% \n  filter(Name_En %in% c(\"Thailand\", \"Spain\", \"Ecuador\", \"Taiwan Province of China\", \"China\", \"Indonesia\", \"Korea, Republic of\", \"Viet Nam\", \"Philippines\", \"Netherlands\", \"Mauritius\", \"Japan\", \"United States of America\", \"Italy\", \"France\", \"Germany\", \"United Kingdom\", \"Australia\", \"Canada\", \"Portugal\", \"Saudi Arabia\")) %>% \n  select(UN_Code, Name_En)\n\n\n\nOK, I got the code of country\nFilter Code of Country\n\n\nTUNA <- TUNA %>% \n  filter(COUNTRY %in% c(\"036\", \"124\", \"156\", \"158\", \"218\", \"250\", \"276\", \"360\", \"380\", \"392\", \"410\", \"480\", \"528\", \"608\", \"620\", \"682\", \"704\", \"724\", \"764\", \"826\", \"840\"))\n\n\n\nAfter that I do the same things like before on Species\nDecode - Encode\n\n\nTUNA$COUNTRY <- sapply(as.character(TUNA$COUNTRY), switch, \n                            \"036\" = \"Australia\",\n                            \"124\" = \"Canada\", \n                            \"156\" = \"China\", \n                            \"158\" = \"Taiwan Province of China\", \n                            \"218\" = \"Ecuador\",\n                            \"250\" = \"France\", \n                            \"276\" = \"Germany\",\n                            \"360\" = \"Indonesia\",\n                            \"380\" = \"Italy\",\n                            \"392\" = \"Japan\", \n                            \"410\" = \"Korea, Republic of\", \n                            \"480\" = \"Mauritius\", \n                            \"528\" = \"Netherlands\",\n                            \"608\" = \"Philippines\", \n                            \"620\" = \"Portugal\",\n                            \"682\" = \"Saudi Arabia\",\n                            \"704\" = \"Viet Nam\",\n                            \"724\" = \"Spain\", \n                            \"764\" = \"Thailand\", \n                            \"826\" = \"United Kingdom\", \n                            \"840\" = \"United States of America\")\n\n\n\n2.3 Fishing Ground\nNow, where the fish is capturing. The Fishing ground\n\n\nfishing_ground <- waterarea %>% \n  filter(Code %in% c(\"77\", \"87\", \"21\", \"67\", \"61\", \"71\", \"27\", \"31\", \"51\", \"57\", \"81\", \"34\", \"37\", \"47\", \"41\")) %>% \n  select(Code, Name_en)\n\n\n\n\n\nTUNA$AREA <- sapply(as.character(TUNA$AREA), switch,\n                    \"77\" = \"Pacific, Eastern Central\",\n                    \"87\" = \"Pacific, Southeast\",\n                    \"21\" = \"Atlantic, Northwest\",\n                    \"67\" = \"Pacific, Northeast\",\n                    \"61\" = \"Pacific, Northwest\",\n                    \"71\" = \"Pacific, Western Central\",\n                    \"27\" = \"Atlantic, Northeast\",\n                    \"31\" = \"Atlantic, Western Central\",\n                    \"51\" = \"Indian Ocean, Western\", \n                    \"57\" = \"Indian Ocean, Eastern\",\n                    \"81\" = \"Pacific, Southwest\",\n                    \"34\" = \"Atlantic, Eastern Central\",\n                    \"37\" = \"Mediterranean and Black Sea\",\n                    \"47\" = \"Atlantic, Southeast\",\n                    \"41\" = \"Atlantic, Southwest\")\n\n\n\n2.4 Source\nAnother to hervesting the Tuna is from Marine Aquaculture\n\n\nTUNA$SOURCE <- sapply(as.character(TUNA$SOURCE), switch,\n                      \"3\" = \"Marine Aquaculture\",\n                      \"4\" = \"Capture Fisheries\")\n\n\n\n2.5 Sub-Genus\nIn this step I did a little future enginering, create a new colomn ._.\n\n\n\n\n\nThunnus <- Thunnus %>% \n  mutate(FIN = SPECIES)\n\n\n\nNext, species grouping by their sub-genus\n\n\nThunnus$FIN <- sapply(as.character(Thunnus$FIN), switch, \n                      \"Atlantic Bluefin Tuna\" = \"Bluefin\",\n                      \"Pacific Bluefin Tuna\" = \"Bluefin\", \n                      \"Longtail Tuna\" = \"Yellowfin\", \n                      \"Blackfin Tuna\" =\"Yellowfin\", \n                      \"Albacore\" = \"Bluefin\",\n                      \"Southern Bluefin Tuna\" = \"Bluefin\", \n                      \"Yellowfin Tuna\" = \"Yellowfin\",\n                      \"Bigeye Tuna\" = \"Bluefin\")\n\n\n\n\n\n\n3 EDA | Exploratory Data Analysis\n3.1 Total Catch by Fishing Ground\n\n\n\nPacific, Southeast is the closest ocean to Indonesia, it could be that Indonesian fishermen catch tuna at this fishing ground. The species most frequently capture is Yellowfin Tuna, which is NT IUCN status or near threatened. However, if they are almost threatened, then are they the most worthy of exploitation?\n3.2 Total Yearly Catch by Sub-Genus\n\n\n{\"x\":{\"visdat\":{\"1fd2a5eb433\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1fd2a5eb433\",\"attrs\":{\"1fd2a5eb433\":{\"labels\":{},\"values\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"labels\":[\"Bluefin\",\"Yellowfin\"],\"values\":[538374,846409],\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\n3.3 Total Yearly Catch by Species\n\n\n{\"x\":{\"visdat\":{\"1fd2bfa63a5\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1fd2bfa63a5\",\"attrs\":{\"1fd2bfa63a5\":{\"labels\":{},\"values\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"labels\":[\"Albacore\",\"Atlantic Bluefin Tuna\",\"Bigeye Tuna\",\"Blackfin Tuna\",\"Longtail Tuna\",\"Pacific Bluefin Tuna\",\"Southern Bluefin Tuna\",\"Yellowfin Tuna\"],\"values\":[181951,19947,304332,6,83710,24798,7346,762693],\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\n3.4 Total Yearly Catch by Country\n\n\n\n3.5 Time Series\nBlue Fin X Yellow Fin (1950 - 2018)\n\n\n\n3.6 Trend\nSub-Genus Yellowfin Tuna\n\n\n\nSub-Genus Bluefin Tuna\n\n\n\n3.7 Capture vs Culture\n\n\n{\"x\":{\"visdat\":{\"1fd278f5c4e9\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1fd278f5c4e9\",\"attrs\":{\"1fd278f5c4e9\":{\"labels\":{},\"values\":{},\"title\":\"Total Catch by Source in 2018\",\"textinfo\":\"none\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"labels\":[\"Capture Fisheries\",\"Marine Aquaculture\"],\"values\":[1365673,19110],\"title\":\"Total Catch by Source in 2018\",\"textinfo\":\"none\",\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\n3.8 The Rising of Marine Aquaculture\n\n\n\n4. Solution\n4.1 Maximum Sustainable Yield\n\n\n\nFigure 2: MSY Concept.\n\n\n\nMaximum sustainable yield is a concept, conservation of fishery resources is very necessary. By using the MSY concept, it is expected to be able to maintain sustainability\n4.2 Marine Aquaculture\n\n\n\nFigure 3: Marine Aquaculture.\n\n\n\nMarine aquaculture in the future will be a solution to overexploitation of tuna\n5. Reference\nhttp://www.fao.org/fishery/statistics/global-production/en  Cover photo by kate on Unsplash  This article also available on Medium and Rpubs\n\n\n\n",
    "preview": "posts/2021-08-02-wicked-tuna/images/kate-BRnnJ6vVNdY-unsplash.jpg",
    "last_modified": "2021-08-03T00:34:50+07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-07-26-wicked-salmon/",
    "title": "Wicked Salmon",
    "description": "Decreasing of salmon population in wild habitat are cause by over fishing and developed on the river stream such as a dam. Because salmons are Anadromous they are swiming against the river flow from the ocean and back to the freshwater for spawning.",
    "author": [
      {
        "name": "Fajar Nugroho",
        "url": "https://fajardwnugroho.com/"
      }
    ],
    "date": "2021-07-22",
    "categories": [
      "R",
      "Data Analysis",
      "Fisheries"
    ],
    "contents": "\n\nContents\n1. Intro\n1.1 Greetings\n1.2 Brief\n1.3 Problem Background\n1.4 Library\n1.5 Dataset\n\n2. Data Preparation\n2.1 Subset Columns & Rows\n2.2 Check the Data\n2.3 Convert Data\n\n3 Data Exploratory and Explanatory\n3.1 Most popular species\n3.2 Where they came from\n3.3 Aquaculture\n3.4 Country and cultivation\n\n4. Conclusion\n5. Reference\n\n1. Intro\n1.1 Greetings\nHelo, Welcome to My Rmd In this Rmd I would explore a little bit about salmon.\n1.2 Brief\nData source is from FAO. There are a lot of species, however Im only need a commercial salmon species. I wont to know about the source, which country? and what the metodologi used to harvest salmon?\n1.3 Problem Background\nDecreasing of salmon population in wild habitat are cause by over fishing and developed on the river stream such as a dam. Because salmons are Anadromous they are swiming against the river flow from the ocean and back to the freshwater for spawning.\n1.4 Library\n\n\nlibrary(readr)\nlibrary(readxl)\n\n\n\n1.5 Dataset\n\n\nfish <- read_csv(\"input_fish/TS_FI_PRODUCTION.csv\")\nspecies <- read_csv(\"input_fish/CL_FI_SPECIES_GROUPS.csv\")\ncountry <- read_csv(\"input_fish/CL_FI_COUNTRY_GROUPS.csv\")\nsource <- read_csv(\"input_fish/CL_FI_PRODUCTION_SOURCE.csv\")\nnote <- read_xlsx(\"input_fish/DSD_FI_PRODUCTION.xlsx\")\n\n\n\n2. Data Preparation\n2.1 Subset Columns & Rows\nI only chose 7 species of salmon and for column I chose Country, Source, Species, Year, and Quantity\n\n\nsalmon <- fish[ fish$SPECIES %in% c(\"SAL\", \"CHI\", \"CHU\", \"COH\", \"CHE\", \"PIN\", \"SOC\") , \n                                  c(\"COUNTRY\", \"SOURCE\", \"SPECIES\", \"YEAR\", \"QUANTITY\")]\n\n\n\nand then assign to the salmon data frame\n2.2 Check the Data\n2.2.1 Check structure data\n\n\nstr(salmon)\n\n\ntibble [6,724 × 5] (S3: tbl_df/tbl/data.frame)\n $ COUNTRY : chr [1:6724] \"643\" \"643\" \"643\" \"643\" ...\n $ SOURCE  : num [1:6724] 4 4 4 4 4 4 4 4 4 4 ...\n $ SPECIES : chr [1:6724] \"SAL\" \"CHE\" \"CHE\" \"CHE\" ...\n $ YEAR    : num [1:6724] 1988 1995 1994 1993 1992 ...\n $ QUANTITY: num [1:6724] 89 4 4 0 0 0 0 0 0 381 ...\n\n2.2.2 Cek Missing data\n\n\ncolSums(is.na(salmon))\n\n\n COUNTRY   SOURCE  SPECIES     YEAR QUANTITY \n       0        0        0        0        0 \n\nThere is no missing data in salmon data frame\n2.3 Convert Data\n2.3.1 Convert country code to country name\nCheck country code\n\n\nunique(salmon$COUNTRY)\n\n\n [1] \"643\" \"410\" \"666\" \"840\" \"724\" \"810\" \"752\" \"124\" \"152\" \"208\" \"233\"\n[12] \"234\" \"250\" \"246\" \"276\" \"304\" \"352\" \"372\" \"833\" \"392\" \"428\" \"440\"\n[23] \"528\" \"554\" \"578\" \"616\" \"620\" \"826\" \"300\" \"408\" \"196\" \"036\" \"792\"\n[34] \"376\" \"100\"\n\nInterpret county code\n\n\nnegara <- country [ country$UN_Code %in% c(\"643\", \"410\", \"666\", \"840\", \"724\", \n                                           \"810\", \"752\", \"124\", \"152\", \"208\", \n                                           \"233\", \"234\", \"250\", \"246\", \"276\", \n                                           \"304\", \"352\", \"372\", \"833\", \"392\", \n                                           \"428\", \"440\", \"528\", \"554\", \"578\", \n                                           \"616\", \"620\", \"826\", \"300\", \"408\", \n                                           \"196\",  \"36\", \"792\", \"376\", \"100\") , ]\nnegara$Name_En\n\n\n [1] \"Bulgaria\"                 \"Canada\"                  \n [3] \"Chile\"                    \"Cyprus\"                  \n [5] \"Denmark\"                  \"Estonia\"                 \n [7] \"Faroe Islands\"            \"Finland\"                 \n [9] \"France\"                   \"Germany\"                 \n[11] \"Greece\"                   \"Greenland\"               \n[13] \"Iceland\"                  \"Ireland\"                 \n[15] \"Israel\"                   \"Japan\"                   \n[17] \"Korea, Dem. People's Rep\" \"Korea, Republic of\"      \n[19] \"Latvia\"                   \"Lithuania\"               \n[21] \"Netherlands\"              \"New Zealand\"             \n[23] \"Norway\"                   \"Poland\"                  \n[25] \"Portugal\"                 \"Russian Federation\"      \n[27] \"St. Pierre and Miquelon\"  \"Spain\"                   \n[29] \"Sweden\"                   \"Turkey\"                  \n[31] \"Un. Sov. Soc. Rep.\"       \"United Kingdom\"          \n[33] \"Isle of Man\"              \"United States of America\"\n\nThere are 34 countries in salmon data frame, however according to the FAO there are only 14 countries that contribute to the global salmon trade, So I just convert 14 countries to the salmon data frame.\n\n\nsalmon$COUNTRY[salmon$COUNTRY==\"578\"]<-\"Norway\"\nsalmon$COUNTRY[salmon$COUNTRY==\"152\"]<-\"Chile\"\nsalmon$COUNTRY[salmon$COUNTRY==\"752\"]<-\"Sweden\"\nsalmon$COUNTRY[salmon$COUNTRY==\"208\"]<-\"Denmark\"\nsalmon$COUNTRY[salmon$COUNTRY==\"616\"]<-\"Poland\"\nsalmon$COUNTRY[salmon$COUNTRY==\"826\"]<-\"United Kingdom\"\nsalmon$COUNTRY[salmon$COUNTRY==\"840\"]<-\"United States of America\"\nsalmon$COUNTRY[salmon$COUNTRY==\"124\"]<-\"Canada\"\nsalmon$COUNTRY[salmon$COUNTRY==\"250\"]<-\"France\"\nsalmon$COUNTRY[salmon$COUNTRY==\"276\"]<-\"Germany\"\nsalmon$COUNTRY[salmon$COUNTRY==\"528\"]<-\"Netherlands\"\nsalmon$COUNTRY[salmon$COUNTRY==\"392\"]<-\"Japan\"\nsalmon$COUNTRY[salmon$COUNTRY==\"724\"]<-\"Spain\"\nsalmon$COUNTRY[salmon$COUNTRY==\"643\"]<-\"Russian Federation\"\n\n\nunique(salmon$COUNTRY)\n\n\n [1] \"Russian Federation\"       \"410\"                     \n [3] \"666\"                      \"United States of America\"\n [5] \"Spain\"                    \"810\"                     \n [7] \"Sweden\"                   \"Canada\"                  \n [9] \"Chile\"                    \"Denmark\"                 \n[11] \"233\"                      \"234\"                     \n[13] \"France\"                   \"246\"                     \n[15] \"Germany\"                  \"304\"                     \n[17] \"352\"                      \"372\"                     \n[19] \"833\"                      \"Japan\"                   \n[21] \"428\"                      \"440\"                     \n[23] \"Netherlands\"              \"554\"                     \n[25] \"Norway\"                   \"Poland\"                  \n[27] \"620\"                      \"United Kingdom\"          \n[29] \"300\"                      \"408\"                     \n[31] \"196\"                      \"036\"                     \n[33] \"792\"                      \"376\"                     \n[35] \"100\"                     \n\nSubset 14 countires\n\n\nsalmon <- salmon[ salmon$COUNTRY %in% c(\"Norway\", \"Chile\", \"Sweden\", \"Denmark\", \"Poland\", \n                                        \"United Kingdom\", \"United States of America\", \"Canada\", \n                                        \"France\", \"Germany\", \"Netherlands\", \"Japan\", \"Spain\", \n                                        \"Russian Federation\") , ]\n\nunique(salmon$COUNTRY)\n\n\n [1] \"Russian Federation\"       \"United States of America\"\n [3] \"Spain\"                    \"Sweden\"                  \n [5] \"Canada\"                   \"Chile\"                   \n [7] \"Denmark\"                  \"France\"                  \n [9] \"Germany\"                  \"Japan\"                   \n[11] \"Netherlands\"              \"Norway\"                  \n[13] \"Poland\"                   \"United Kingdom\"          \n\n2.3.2 Convert code of source to source name\nInterpret code of source\n\n\nsource\n\n\n# A tibble: 5 × 5\n  Identifier Code          Name_En        Name_Fr        Name_Es      \n       <dbl> <chr>         <chr>          <chr>          <chr>        \n1          5 AQUACULTURE   Aquaculture p… Production de… Producción d…\n2          1 FRESHWATER    Aquaculture p… Production de… Producción d…\n3          2 BRACKISHWATER Aquaculture p… Production de… Producción d…\n4          3 MARINE        Aquaculture p… Production de… Producción d…\n5          4 CAPTURE       Capture produ… Captures       Capturas     \n\nCheck code of source on salmon data frame\n\n\nunique(salmon$SOURCE)\n\n\n[1] 4 1 3\n\nThere are only 3 of 5 source in the salmon data frame So now convert the code to the name\n\n\nsalmon$SOURCE[salmon$SOURCE==\"1\"]<-\"Freshwater Aquaculture\"\nsalmon$SOURCE[salmon$SOURCE==\"3\"]<-\"Marine Aquaculture\"\nsalmon$SOURCE[salmon$SOURCE==\"4\"]<-\"Capture Fishery\"\n\nunique(salmon$SOURCE)\n\n\n[1] \"Capture Fishery\"        \"Freshwater Aquaculture\"\n[3] \"Marine Aquaculture\"    \n\n2.3.3 Convert species code to species name in english\nInterpret species code\n\n\nSpesies <- species[ species$\"3Alpha_Code\" %in% c(\"SAL\", \"CHI\", \"CHU\", \"COH\", \"CHE\", \"PIN\", \"SOC\") , ]\n\n\n\nconvert the code to spacies name\n\n\nsalmon$SPECIES[salmon$SPECIES==\"SAL\"]<-\"Atlantic Salmon\"\nsalmon$SPECIES[salmon$SPECIES==\"PIN\"]<-\"Humpback Salmon\"\nsalmon$SPECIES[salmon$SPECIES==\"CHU\"]<-\"Keta Salmon\"\nsalmon$SPECIES[salmon$SPECIES==\"CHE\"]<-\"Cherry Salmon\"\nsalmon$SPECIES[salmon$SPECIES==\"SOC\"]<-\"Red Salmon\"\nsalmon$SPECIES[salmon$SPECIES==\"CHI\"]<-\"King Salmon\"\nsalmon$SPECIES[salmon$SPECIES==\"COH\"]<-\"Silver Salmon\"\n\nunique(salmon$SPECIES)\n\n\n[1] \"Atlantic Salmon\" \"Cherry Salmon\"   \"Red Salmon\"     \n[4] \"King Salmon\"     \"Silver Salmon\"   \"Keta Salmon\"    \n[7] \"Humpback Salmon\"\n\n2.3.4 Character to factor\n\n\nsalmon$COUNTRY <- as.factor(salmon$COUNTRY)\nsalmon$SOURCE <- as.factor(salmon$SOURCE)\nsalmon$SPECIES <- as.factor(salmon$SPECIES)\nsalmon$YEAR <- as.factor(salmon$YEAR)\n\n\n\nIm just need year at 2018 so, i subset it\n\n\nsalmon <- salmon[ salmon$YEAR == 2018, ]\nsalmon <- salmon[ , c(\"COUNTRY\", \"SOURCE\", \"SPECIES\", \"QUANTITY\")]\n\n\n\nNow the data is ready to explore\n3 Data Exploratory and Explanatory\n3.1 Most popular species\n\n\nsalmon_species <- as.data.frame(sort(prop.table(table(droplevels(salmon[ , \"SPECIES\" ]))), \n                                     decreasing = T))\nnames(salmon_species)[1] <- paste(\"Salmon Species\")\nhead(salmon_species, 3)\n\n\n   Salmon Species      Freq\n1 Atlantic Salmon 0.4393939\n2 Humpback Salmon 0.1212121\n3   Silver Salmon 0.1212121\n\nOk this is the top 3 of the most popular salmon\nI try to make a pie chart\n\n\ngraphics::pie(xtabs(~ SPECIES, salmon))\n\n\n\n\n3.2 Where they came from\nFirst, Atlantic Salmon\n\n\nAtlantic_Salmon_Source <- as.data.frame(sort(prop.table(table(droplevels(salmon[salmon$SPECIES == \"Atlantic Salmon\",\"SOURCE\"]))),decreasing = T))\nnames(Atlantic_Salmon_Source)[1] <- paste(\"Atlantic Salmon\")\nAtlantic_Salmon_Source\n\n\n         Atlantic Salmon      Freq\n1        Capture Fishery 0.6206897\n2     Marine Aquaculture 0.2758621\n3 Freshwater Aquaculture 0.1034483\n\nSo capture fisheries practice is still being carried out, even though this species is already under threat\nSecond, Humpback Salmon\n\n\nHumpback_Salmon_Source <- as.data.frame(sort(prop.table(table(droplevels(salmon[salmon$SPECIES == \"Humpback Salmon\",\"SOURCE\"]))),decreasing = T))\nnames(Humpback_Salmon_Source)[1] <- paste(\"Humpback Salmon\")\nHumpback_Salmon_Source\n\n\n     Humpback Salmon  Freq\n1    Capture Fishery 0.875\n2 Marine Aquaculture 0.125\n\nThird, Silver Salmon\n\n\nSilver_Salmon_Source <- as.data.frame(sort(prop.table(table(droplevels(salmon[salmon$SPECIES == \"Silver Salmon\",\"SOURCE\"]))),decreasing = T))\nnames(Silver_Salmon_Source)[1] <- paste(\"Silver  Salmon\")\nSilver_Salmon_Source\n\n\n          Silver  Salmon  Freq\n1        Capture Fishery 0.625\n2     Marine Aquaculture 0.250\n3 Freshwater Aquaculture 0.125\n\nFrom three species above, the conclusion is capture fisheries still dominate the output of production.\n3.3 Aquaculture\nI am curious, what species are cultivated? Start from Freshwater Aquaculture\n\n\nFreshwater_Aquaculture <- as.data.frame(sort(table(droplevels(salmon[salmon$SOURCE == \"Freshwater Aquaculture\",\n                                                                     \"SPECIES\"]))),decreasing = T)\nnames(Freshwater_Aquaculture)[1] <- paste(\"Freshwater Aquaculture\")\nFreshwater_Aquaculture\n\n\n  Freshwater Aquaculture Freq\n1            Keta Salmon    1\n2          Silver Salmon    1\n3        Atlantic Salmon    3\n\nOk now from Marine Aquaculture\n\n\nMarine_Aquaculture <- as.data.frame(sort(table(droplevels(salmon[salmon$SOURCE == \"Marine Aquaculture\",\n                                                                 \"SPECIES\"]))),decreasing = T)\nnames(Marine_Aquaculture)[1] <- paste(\"Marine Aquaculture\")\nMarine_Aquaculture\n\n\n  Marine Aquaculture Freq\n1    Humpback Salmon    1\n2      Silver Salmon    2\n3    Atlantic Salmon    8\n\nSo based on the data above, not only top three species, but keta salmon is also cultivated\n3.4 Country and cultivation\nwhich countries did cultivation? From Freshwater Aquaculture First\n\n\nCountry_Freshwater_Aquaculture <- as.data.frame(sort(table(droplevels(salmon[salmon$SOURCE == \"Freshwater Aquaculture\" , \"COUNTRY\"]))),decreasing = T)\nnames(Country_Freshwater_Aquaculture)[1] <- paste(\"Freshwater Aquaculture\")\nCountry_Freshwater_Aquaculture\n\n\n  Freshwater Aquaculture Freq\n1                Denmark    1\n2                  Chile    2\n3     Russian Federation    2\n\nAnd then Marine Aquaculture\n\n\nCountry_Marine_Aquaculture <- as.data.frame(sort(table(droplevels(salmon[salmon$SOURCE == \"Marine Aquaculture\" , \"COUNTRY\"]))),decreasing = T)\nnames(Country_Marine_Aquaculture)[1] <- paste(\"Marine Aquaculture\")\nCountry_Marine_Aquaculture\n\n\n        Marine Aquaculture Freq\n1                   France    1\n2                    Japan    1\n3                   Norway    1\n4           United Kingdom    1\n5 United States of America    1\n6                   Canada    2\n7                    Chile    2\n8       Russian Federation    2\n\nOnly Chile and Russia did both cultivation, however how about the production results?\nBefore that I need to aggregate\n\n\nsalmon_country_agg <- aggregate(QUANTITY ~ COUNTRY + SOURCE , salmon , sum)\n\n\n\n\n\nfresh_aquaculture_country <- salmon_country_agg[ salmon_country_agg$SOURCE == \"Freshwater Aquaculture\", ]\nfresh_aquaculture_country\n\n\n              COUNTRY                 SOURCE QUANTITY\n13              Chile Freshwater Aquaculture   683.38\n14            Denmark Freshwater Aquaculture  1030.00\n15 Russian Federation Freshwater Aquaculture     0.00\n\nI was surprised, it turned out that Russia did not produce Freshwater Aquaculture in 2018\n\n\nmarine_aquaculture_country <- salmon_country_agg[ salmon_country_agg$SOURCE == \"Marine Aquaculture\", ]\nmarine_aquaculture_country_sorted <- marine_aquaculture_country[order(-marine_aquaculture_country$QUANTITY, marine_aquaculture_country$COUNTRY),]\nmarine_aquaculture_country_sorted\n\n\n                    COUNTRY             SOURCE  QUANTITY\n20                   Norway Marine Aquaculture 1282003.2\n17                    Chile Marine Aquaculture  808975.8\n22           United Kingdom Marine Aquaculture  166000.0\n16                   Canada Marine Aquaculture  123184.0\n21       Russian Federation Marine Aquaculture   20632.0\n19                    Japan Marine Aquaculture   18000.0\n23 United States of America Marine Aquaculture   16107.0\n18                   France Marine Aquaculture     300.0\n\n\n\ngraphics::barplot(xtabs(QUANTITY ~ COUNTRY,marine_aquaculture_country_sorted))\n\n\n\n\nas well known Norway definitely the highest of Salmon production in Marine Aquaculture\n4. Conclusion\nSo it is actually not easy to cultivate salmon, but the positive thing is that many technologies have been developed to cultivate salmon. Cultivation is also not always positive, the cons is that production costs are too expensive. My assumptions, an easy solution to keep the population of salmon still sustainable is to limit the catch by weight or by fishing season, and improve the technologies for Aquaculture to make the cost is cheaper. I think that is enough, thanks for reading my Rmd.\n5. Reference\nhttp://www.fao.org/fishery/statistics/global-production/en  Cover photo by Marcos Paulo Prado on Unsplash  This article also available on Medium and Rpubs\n\n\n\n",
    "preview": "posts/2021-07-26-wicked-salmon/images/marcos-paulo-prado-B1ZnmSB7htg-unsplash.jpg",
    "last_modified": "2021-11-17T23:02:16+07:00",
    "input_file": {}
  }
]
